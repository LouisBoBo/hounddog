package com.slxk.hounddog.mvp.ui.activity;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.jess.arms.base.BaseActivity;
import com.jess.arms.di.component.AppComponent;
import com.jess.arms.utils.ArmsUtils;
import com.slxk.hounddog.R;
import com.slxk.hounddog.app.MyApplication;
import com.slxk.hounddog.di.component.DaggerSimDetailComponent;
import com.slxk.hounddog.mvp.contract.SimDetailContract;
import com.slxk.hounddog.mvp.model.api.Api;
import com.slxk.hounddog.mvp.model.api.ModuleValueService;
import com.slxk.hounddog.mvp.model.bean.AlertBean;
import com.slxk.hounddog.mvp.model.bean.DeviceDetailResultBean;
import com.slxk.hounddog.mvp.model.bean.SimDetailResultBean;
import com.slxk.hounddog.mvp.model.putbean.DeviceDetailPutBean;
import com.slxk.hounddog.mvp.model.putbean.SimDetailPutBean;
import com.slxk.hounddog.mvp.presenter.SimDetailPresenter;
import com.slxk.hounddog.mvp.utils.ConstantValue;
import com.slxk.hounddog.mvp.utils.DateUtils;
import com.slxk.hounddog.mvp.utils.ToastUtils;
import com.slxk.hounddog.mvp.utils.Utils;
import com.slxk.hounddog.mvp.weiget.AlertAppDialog;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;

import static com.jess.arms.utils.Preconditions.checkNotNull;


/**
 * ================================================
 * Description:
 * <p>
 * Created by MVPArmsTemplate on 12/25/2021 15:38
 * <a href="mailto:jess.yan.effort@gmail.com">Contact me</a>
 * <a href="https://github.com/JessYanCoding">Follow me</a>
 * <a href="https://github.com/JessYanCoding/MVPArms">Star me</a>
 * <a href="https://github.com/JessYanCoding/MVPArms/wiki">See me</a>
 * <a href="https://github.com/JessYanCoding/MVPArmsTemplate">模版请保持更新</a>
 * ================================================
 */
public class SimDetailActivity extends BaseActivity<SimDetailPresenter> implements SimDetailContract.View {

    @BindView(R.id.rl_sim_detail)
    RelativeLayout rlSimDetail;
    @BindView(R.id.edt_sim_number)
    EditText edtSimNumber;
    @BindView(R.id.btn_request)
    Button btnRequest;
    @BindView(R.id.tv_remaining_flow)
    TextView tvRemainingFlow;
    @BindView(R.id.tv_flow_total)
    TextView tvFlowTotal;
    @BindView(R.id.tv_flow_use)
    TextView tvFlowUse;
    @BindView(R.id.tv_status)
    TextView tvStatus;
    @BindView(R.id.tv_balance)
    TextView tvBalance;
    @BindView(R.id.tv_sms_total)
    TextView tvSmsTotal;
    @BindView(R.id.tv_sms_use)
    TextView tvSmsUse;
    @BindView(R.id.tv_sms_surplus)
    TextView tvSmsSurplus;
    @BindView(R.id.tv_sim_status)
    TextView tvSimStatus;
    @BindView(R.id.tv_iccid_number)
    TextView tvIccidNumber;
    @BindView(R.id.tv_sim_number)
    TextView tvSimNumber;
    @BindView(R.id.tv_activation_time)
    TextView tvActivationTime;
    @BindView(R.id.tv_expire_date)
    TextView tvExpireDate;
    @BindView(R.id.btn_recharge)
    Button btnRecharge;
    @BindView(R.id.tv_sim_hint)
    TextView tvSimHint;

    private static final String Intent_Imei_Key = "imei_key";
    private static final String Intent_Simei_Key = "simei_key";
    private String mImei;
    private String mSimei = "";
    private String mDeviceIccid = ""; // 选中设备的iccid

    private String mIccid; // iccid号
    private boolean isRecharge = false; // 是否可充值
    private String simNo; // sim卡卡号
    private String simType; // sim卡类型

    private boolean isExpire = false; // 基础套餐是否到期
    private boolean isFlowExcess = false; // 流量是否超量使用
    private boolean isSimAbnormal = false; // sim卡是否异常停机
    private boolean expireOverOne = false; // 基础套餐过期是否超过一年
    private String mStatus; // 卡状态，待激活状态下不能充值

    public static Intent newInstance(String imei, String simei) {
        Intent intent = new Intent(MyApplication.getMyApp(), SimDetailActivity.class);
        intent.putExtra(Intent_Imei_Key, imei);
        intent.putExtra(Intent_Simei_Key, simei);
        return intent;
    }

    @Override
    public void setupActivityComponent(@NonNull AppComponent appComponent) {
        DaggerSimDetailComponent.builder()
                .appComponent(appComponent)
                .view(this)
                .build()
                .inject(this);
    }

    @Override
    public int initView(@Nullable Bundle savedInstanceState) {
        return R.layout.activity_sim_detail;//setContentView(id);
    }

    @SuppressLint("SetTextI18n")
    @Override
    public void initData(@Nullable Bundle savedInstanceState) {
        setTitle(getString(R.string.sim));
        mImei = getIntent().getStringExtra(Intent_Imei_Key);
        mSimei = getIntent().getStringExtra(Intent_Simei_Key);

        tvSimHint.setText(getString(R.string.tips) + "\n" + getString(R.string.sim_tips_one_hint) + "\n" + getString(R.string.sim_tips_two_hint));
        btnRecharge.setVisibility(View.GONE);
        getDeviceDetailInfo();
    }

    /**
     * 获取设备详细信息
     */
    private void getDeviceDetailInfo() {
        DeviceDetailPutBean.ParamsBean paramsBean = new DeviceDetailPutBean.ParamsBean();
        if (!TextUtils.isEmpty(mSimei)) {
            paramsBean.setSimei(mSimei);
        }

        DeviceDetailPutBean bean = new DeviceDetailPutBean();
        bean.setParams(paramsBean);
        bean.setFunc(ModuleValueService.Fuc_For_Device_Detail);
        bean.setModule(ModuleValueService.Module_For_Device_Detail);

        if (getPresenter() != null) {
            getPresenter().getDeviceDetail(bean);
        }
    }

    /**
     * 获取sim卡详细信息
     */
    private void getSimDetail() {
        mIccid = edtSimNumber.getText().toString().trim();
        if (TextUtils.isEmpty(mIccid)) {
            ToastUtils.show(getString(R.string.input_sim_number));
            return;
        }

        SimDetailPutBean.ParamsBean paramsBean = new SimDetailPutBean.ParamsBean();
        if (TextUtils.isEmpty(mIccid)) {
            if (!TextUtils.isEmpty(mSimei)) {
                paramsBean.setSimei(mSimei);
            }
        } else {
            if (mDeviceIccid.equals(mIccid)) {
                if (!TextUtils.isEmpty(mSimei)) {
                    paramsBean.setSimei(mSimei);
                }
            } else {
                paramsBean.setIccid(mIccid);
            }
        }

        SimDetailPutBean bean = new SimDetailPutBean();
        bean.setFunc(ModuleValueService.Fuc_For_SIM_Detail);
        bean.setModule(ModuleValueService.Module_For_SIM_Detail);
        bean.setParams(paramsBean);

        if (getPresenter() != null) {
            getPresenter().getSimDetail(bean);
        }
    }

    @Override
    public void showMessage(@NonNull String message) {
        checkNotNull(message);
        ArmsUtils.snackbarText(message);
    }

    @Override
    public void launchActivity(@NonNull Intent intent) {
        checkNotNull(intent);
        ArmsUtils.startActivity(intent);
    }

    @Override
    public void killMyself() {
        finish();
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // TODO: add setContentView(...) invocation
        ButterKnife.bind(this);
    }

    @OnClick({R.id.btn_request, R.id.btn_recharge})
    public void onViewClicked(View view) {
        if (Utils.isButtonQuickClick()) {
            switch (view.getId()) {
                case R.id.btn_request:
                    hideKeyboard(edtSimNumber);
                    rlSimDetail.setVisibility(View.GONE);
                    btnRecharge.setVisibility(View.GONE);
                    getSimDetail();
                    break;
                case R.id.btn_recharge:
                    onSimRecharge();
                    break;
            }
        }
    }

    /**
     * 跳转充值页面
     */
    private void onSimRecharge() {
        if (isRecharge) {
            if (mStatus.equals("注销")) {
                ToastUtils.show(getString(R.string.sim_status_logout_hint));
                return;
            }
            if (mStatus.equals("未知")) {
                onSimError();
                return;
            }
            if (isSimAbnormal && !isExpire && !isFlowExcess) {
                onSimError();
            } else {
                launchActivity(PayWebViewActivity.newInstance(getString(R.string.sim_recharge),
                        Api.Pay_Sim_Recharge + ConstantValue.getPaySimRechargeValue(mSimei, mIccid)));
            }
        } else {
            ToastUtils.show(getString(R.string.sim_recharge_error));
        }
    }

    /**
     * sim卡异常
     */
    private void onSimError() {
        AlertBean bean = new AlertBean();
        bean.setTitle(getString(R.string.tip));
        bean.setAlert(getString(R.string.sim_simAbnormal_hint));
        bean.setConfirmTip(getString(R.string.confirm));
        bean.setCancelTip(getString(R.string.cancel));
        AlertAppDialog dialog = new AlertAppDialog();
        dialog.show(getSupportFragmentManager(), bean, new AlertAppDialog.onAlertDialogChange() {
            @Override
            public void onConfirm() {

            }

            @Override
            public void onCancel() {

            }
        });
    }

    @SuppressLint("SetTextI18n")
    @Override
    public void getSimDetailSuccess(SimDetailResultBean simDetailResultBean) {
        rlSimDetail.setVisibility(View.VISIBLE);
        mIccid = simDetailResultBean.getIccid();
        simNo = simDetailResultBean.getPhone();
        simType = simDetailResultBean.getType();
        isRecharge = simDetailResultBean.isIs_recharge();
        tvRemainingFlow.setText(Utils.formatValue((double) simDetailResultBean.getLeft_flow()  / 100) + "");
        tvFlowUse.setText(Utils.formatValue((double) simDetailResultBean.getShow_flow() / 100) + "M");
        tvFlowTotal.setText(Utils.formatValue((double) simDetailResultBean.getTflow() / 100) + "M");
        if (!TextUtils.isEmpty(simDetailResultBean.getStatus())) {
            tvStatus.setText(simDetailResultBean.getStatus());
        } else {
            tvStatus.setText(getString(R.string.unknown));
        }
//        if (simDetailResultBean.getBalance() != 0){
//            tvBalance.setText(Utils.formatValue((double) simDetailResultBean.getBalance() / 100));
//        }
        tvSmsTotal.setText(simDetailResultBean.getSsms() + getString(R.string.sms_unit));
        tvSmsUse.setText(simDetailResultBean.getRsms() + getString(R.string.sms_unit));
        tvSmsSurplus.setText((simDetailResultBean.getSsms() - simDetailResultBean.getRsms()) + getString(R.string.sms_unit));
        if (!TextUtils.isEmpty(simDetailResultBean.getDstate())) {
            tvSimStatus.setText(simDetailResultBean.getDstate());
        } else {
            tvSimStatus.setText(getString(R.string.unknown));
        }
        tvIccidNumber.setText(simDetailResultBean.getIccid());
        tvSimNumber.setText(simDetailResultBean.getPhone());
        tvActivationTime.setText(simDetailResultBean.getSperiod());
        tvExpireDate.setText(simDetailResultBean.getEperiod());

        mStatus = simDetailResultBean.getStatus();
        isSimAbnormal = simDetailResultBean.getStatus().equals("停机");
        // 计算流量剩余值
        int differenceFlow = 0;
        if (simType.equals(Api.Sim_Fxft)) {
            differenceFlow = simDetailResultBean.getTflow() - simDetailResultBean.getRtflow();
        } else {
            differenceFlow = simDetailResultBean.getTflow() - simDetailResultBean.getRflow();
        }
        isFlowExcess = differenceFlow <= 0;
        String today = DateUtils.getTodayDateTime_3();
        if (!TextUtils.isEmpty(simDetailResultBean.getEperiod()) && !TextUtils.isEmpty(today)) {
            isExpire = Long.parseLong(DateUtils.data_4(today)) > Long.parseLong(DateUtils.data_4(simDetailResultBean.getEperiod()));
        } else {
            isExpire = false;
        }
        // 判断卡到期时间距离当前时间是否超过一年
        if (!TextUtils.isEmpty(simDetailResultBean.getEperiod()) && !TextUtils.isEmpty(today)) {
            long differenceTime = Long.parseLong(DateUtils.data_4(simDetailResultBean.getEperiod())) - Long.parseLong(DateUtils.data_4(today));
            long oneYear = 60 * 60 * 24 * 365;
            expireOverOne = differenceTime > oneYear;
        } else {
            expireOverOne = false;
        }

        if (isRecharge) {
            btnRecharge.setVisibility(View.VISIBLE);
        } else {
            btnRecharge.setVisibility(View.GONE);
        }
    }

    @Override
    public void getDeviceDetailInfoSuccess(DeviceDetailResultBean deviceDetailResultBean) {
        if (!TextUtils.isEmpty(deviceDetailResultBean.getIccid())) {
            mDeviceIccid = deviceDetailResultBean.getIccid();
            edtSimNumber.setText(mDeviceIccid);
            getSimDetail();
        }
    }

}
